stages:          # List of stages for jobs, and their order of execution
  - prep
  - build
  - upload
  - release
  - publish

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/groktech/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_TITLE}"

.default_rules:
  rules:
    if: '$CI_COMMIT_BRANCH == "main"'

prep:
  stage: prep
  image: alpine:latest
  rules:
    - !reference [.default_rules, rules]
  script:
      - apk add jq
      - apk add git
      - ID=$(printf ${CI_PROJECT_TITLE} | sed "s/.*\///g")
      - VERSION=$(jq -r .version src/specs.json)
      - if git tag -l "$VERSION" | grep "$VERSION"; then echo "Version $VERSION already exists"; exit 1; fi
      - PACKAGE_NAME="${CI_PROJECT_TITLE}-$VERSION.zip"
      - printf "PACKAGE_NAME=%s\nVERSION=%s\nID=%s\n" "$PACKAGE_NAME" "$VERSION" "$ID" > prep.env
      - cat prep.env
  artifacts:
    reports:
      dotenv: prep.env

build:
  stage: build
  image: alpine:latest
  dependencies:
    - prep
  rules:
    - !reference [.default_rules, rules]
  script:
      - echo "version $VERSION"
      - echo "package $PACKAGE_NAME"
      - apk add zip
      - mkdir packages
      - cd "src"
      - zip ../packages/${PACKAGE_NAME} -r ./*
  artifacts:
    paths:
      - ./packages

upload:      
  stage: upload
  image: curlimages/curl:latest
  dependencies:
    - prep
    - build
  rules:
    - !reference [.default_rules, rules]
  script:
    - >
      echo "version: $VERSION"
      echo "package: $PACKAGE_NAME"
      echo "uploading to: ${PACKAGE_REGISTRY_URL}/$VERSION/$PACKAGE_NAME"
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file packages/$PACKAGE_NAME "${PACKAGE_REGISTRY_URL}/$VERSION/$PACKAGE_NAME"
    - echo "Package successfully uploaded."

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - prep
  rules:
    - !reference [.default_rules, rules]
  script:
    - RELEASE_VERSION="$VERSION";
    - printf "RELEASE_VERSION=%s\n" "$RELEASE_VERSION" > release.env;
    - > 
      #if [ git tag -l "$RELEASE_VERSION" ]; then
      #  echo "Version $VERSION already exists"; exit 1;
      #else
      release-cli create --name "$RELEASE_VERSION" --tag-name "$RELEASE_VERSION" --assets-link "{\"name\":\"$PACKAGE_NAME\",\"url\":\"${PACKAGE_REGISTRY_URL}/$RELEASE_VERSION/$PACKAGE_NAME\"}";
      #fi;
  artifacts:
    reports:
      dotenv: release.env

publish:
  stage: publish
  image: curlimages/curl:latest
  dependencies:
    - prep
    - build
    - release
  rules:
    - !reference [.default_rules, rules]
  script:
    - SHA256=$(sha256sum "./packages/${PACKAGE_NAME}" | awk '{print $1}');
    - echo "uploading $ID [package - $PACKAGE_NAME] from ${CI_PROJECT_PATH} (sha256 - $SHA256, version - $RELEASE_VERSION, package source - ${PACKAGE_REGISTRY_URL})"
    - >
      curl -i -u "BakeBuddyBot:$GHAT" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/BakeBuddyBot/air/dispatches -d "{\"event_type\":\"app-release\", \"client_payload\": { \"id\": \"$ID\", \"repository\": \"${CI_PROJECT_PATH}\", \"version\": \"$RELEASE_VERSION\", \"package\": \"${PACKAGE_REGISTRY_URL}/$RELEASE_VERSION/$PACKAGE_NAME\", \"sha256\": \"$SHA256\"}"
